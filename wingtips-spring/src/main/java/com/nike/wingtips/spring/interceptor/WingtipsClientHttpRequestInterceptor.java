package com.nike.wingtips.spring.interceptor;

import com.nike.wingtips.Span;
import com.nike.wingtips.Span.SpanPurpose;
import com.nike.wingtips.Tracer;
import com.nike.wingtips.spring.util.HttpRequestWrapperWithModifiableHeaders;

import org.springframework.http.HttpMethod;
import org.springframework.http.HttpRequest;
import org.springframework.http.client.ClientHttpRequestExecution;
import org.springframework.http.client.ClientHttpRequestInterceptor;
import org.springframework.http.client.ClientHttpResponse;
import org.springframework.web.client.RestTemplate;

import java.io.IOException;

import static com.nike.wingtips.spring.util.WingtipsSpringUtil.setTracingPropagationHeaders;

/**
 * A {@link ClientHttpRequestInterceptor} which propagates Wingtips tracing information on a downstream {@link
 * RestTemplate} call's request headers, with an option to surround downstream calls in a subspan. The subspan option
 * defaults to on and is highly recommended since the subspans will provide you with timing info for your downstream
 * calls separate from any parent span that may be active at the time this interceptor executes.
 *
 * <p>If the subspan option is enabled but there's no current span on the current thread when this interceptor executes,
 * then a new root span (new trace) will be created rather than a subspan. In either case the newly created span will
 * have a {@link Span#getSpanPurpose()} of {@link SpanPurpose#CLIENT} since this interceptor is for a client call.
 * The {@link Span#getSpanName()} for the newly created span will be generated by {@link
 * #getSubspanSpanName(HttpRequest)} - override that method if you want a different span naming format.
 *
 * <p>Note that if you have the subspan option turned off then this interceptor will propagate the {@link
 * Tracer#getCurrentSpan()}'s tracing info downstream if it's available, but will do nothing if no current span exists
 * on the current thread when this interceptor executes as there's no tracing info to propagate. Turning on the
 * subspan option mitigates this as it guarantees there will be a span to propagate.
 *
 * <p>Since this interceptor works by setting request headers and we may be passed an immutable request, we wrap
 * the request in a {@link HttpRequestWrapperWithModifiableHeaders} to guarantee that the request headers are mutable.
 * Keep in mind that this will make the headers mutable for any interceptors that execute after this one.
 */
@SuppressWarnings("WeakerAccess")
public class WingtipsClientHttpRequestInterceptor implements ClientHttpRequestInterceptor {

    /**
     * The default implementation of this class. Since this class is thread-safe you can reuse this rather than creating
     * a new object.
     */
    public static final WingtipsClientHttpRequestInterceptor DEFAULT_IMPL = new WingtipsClientHttpRequestInterceptor();

    /**
     * If this is true then all downstream calls that this interceptor intercepts will be surrounded by a
     * subspan which will be started immediately before the call and completed as soon as the call completes.
     */
    protected final boolean surroundCallsWithSubspan;

    /**
     * Default constructor - sets {@link #surroundCallsWithSubspan} to true.
     */
    public WingtipsClientHttpRequestInterceptor() {
        this(true);
    }

    /**
     * Constructor that lets you choose whether downstream calls will be surrounded with a subspan.
     *
     * @param surroundCallsWithSubspan pass in true to have downstream calls surrounded with a new span, false to only
     * propagate the current span's info downstream (no subspan).
     */
    public WingtipsClientHttpRequestInterceptor(boolean surroundCallsWithSubspan) {
        this.surroundCallsWithSubspan = surroundCallsWithSubspan;
    }

    @Override
    public ClientHttpResponse intercept(
        HttpRequest request, byte[] body, ClientHttpRequestExecution execution
    ) throws IOException {
        Tracer tracer = Tracer.getInstance();
        Span spanAroundCall = null;
        try {
            if (surroundCallsWithSubspan) {
                // Will start a new trace if necessary, or a subspan if a trace is already in progress.
                spanAroundCall = tracer.startSpanInCurrentContext(getSubspanSpanName(request), SpanPurpose.CLIENT);
            }

            HttpRequest wrapperRequest = new HttpRequestWrapperWithModifiableHeaders(request);
            setTracingPropagationHeaders(wrapperRequest, tracer.getCurrentSpan());

            return execution.execute(wrapperRequest, body);
        }
        finally {
            if (spanAroundCall != null) {
                // Span.close() contains the logic we want - if the spanAroundCall was an overall span (new trace)
                //      then tracer.completeRequestSpan() will be called, otherwise it's a subspan and
                //      tracer.completeSubSpan() will be called.
                spanAroundCall.close();
            }
        }
    }

    /**
     * Returns the name that should be used for the subspan surrounding the call. Defaults to {@code
     * resttemplate_downstream_call-[HTTP_METHOD]_[REQUEST_URI]}, e.g. for a GET call to https://foo.bar/baz,
     * this would return {@code "resttemplate_downstream_call-GET_https://foo.bar/baz"}. You can override this method
     * to return something else if you want a different subspan name format.
     *
     * @param request The request that is about to be executed.
     * @return The name that should be used for the subspan surrounding the call.
     */
    protected String getSubspanSpanName(HttpRequest request) {
        return "resttemplate_downstream_call-" + getRequestMethodAsString(request) + "_"
               + stripQueryString(request.getURI().toString());
    }

    /**
     * Helper method for stripping the query string (and everything after it) from a URI.
     *
     * @param uri The URI.
     * @return The given {@code uri} string after removing everything following the query string question mark. If no
     * query string is found then the given {@code uri} will be returned unmodified.
     */
    protected String stripQueryString(String uri) {
        int indexOfQuestionMark = uri.indexOf('?');

        if (indexOfQuestionMark == -1) {
            return uri;
        }

        return uri.substring(0, indexOfQuestionMark);
    }

    /**
     * @param request The request that is about to be executed.
     * @return The given request's {@link HttpMethod#name()}, or "UNKNOWN" if the method is null.
     */
    protected String getRequestMethodAsString(HttpRequest request) {
        HttpMethod method = request.getMethod();
        if (method == null) {
            return "UNKNOWN";
        }

        return method.name();
    }
}
