package com.nike.wingtips.spring.interceptor;

import com.nike.wingtips.Span;
import com.nike.wingtips.Tracer;
import com.nike.wingtips.spring.util.HttpRequestWrapperWithModifiableHeaders;
import com.nike.wingtips.util.TracingState;

import org.springframework.http.HttpMethod;
import org.springframework.http.HttpRequest;
import org.springframework.http.client.AsyncClientHttpRequestExecution;
import org.springframework.http.client.AsyncClientHttpRequestInterceptor;
import org.springframework.http.client.ClientHttpResponse;
import org.springframework.util.concurrent.ListenableFuture;
import org.springframework.util.concurrent.ListenableFutureCallback;
import org.springframework.web.client.AsyncRestTemplate;

import java.io.IOException;

import static com.nike.wingtips.spring.util.WingtipsSpringUtil.setTracingPropagationHeaders;
import static com.nike.wingtips.util.AsyncWingtipsHelperJava7.runnableWithTracing;
import static com.nike.wingtips.util.AsyncWingtipsHelperJava7.unlinkTracingFromCurrentThread;

/**
 * A {@link AsyncClientHttpRequestInterceptor} which propagates Wingtips tracing information on a downstream {@link
 * AsyncRestTemplate} call's request headers, with an option to surround downstream calls in a subspan. The subspan option
 * defaults to on and is highly recommended since the subspans will provide you with timing info for your downstream
 * calls separate from any parent span that may be active at the time this interceptor executes.
 *
 * <p>If the subspan option is enabled but there's no current span on the current thread when this interceptor executes,
 * then a new root span (new trace) will be created rather than a subspan. In either case the newly created span will
 * have a {@link Span#getSpanPurpose()} of {@link Span.SpanPurpose#CLIENT} since this interceptor is for a client call.
 * The {@link Span#getSpanName()} for the newly created span will be generated by {@link
 * #getSubspanSpanName(HttpRequest)} - override that method if you want a different span naming format.
 *
 * <p>Note that if you have the subspan option turned off then this interceptor will propagate the {@link
 * Tracer#getCurrentSpan()}'s tracing info downstream if it's available, but will do nothing if no current span exists
 * on the current thread when this interceptor executes as there's no tracing info to propagate. Turning on the
 * subspan option mitigates this as it guarantees there will be a span to propagate.
 *
 * <p>Since this interceptor works by setting request headers and we may be passed an immutable request, we wrap
 * the request in a {@link HttpRequestWrapperWithModifiableHeaders} to guarantee that the request headers are mutable.
 * Keep in mind that this will make the headers mutable for any interceptors that execute after this one.
 *
 * @author Nic Munroe
 */
@SuppressWarnings("WeakerAccess")
public class WingtipsAsyncClientHttpRequestInterceptor implements AsyncClientHttpRequestInterceptor {

    /**
     * The default implementation of this class. Since this class is thread-safe you can reuse this rather than creating
     * a new object.
     */
    public static final WingtipsAsyncClientHttpRequestInterceptor DEFAULT_IMPL =
        new WingtipsAsyncClientHttpRequestInterceptor();

    /**
     * If this is true then all downstream calls that this interceptor intercepts will be surrounded by a
     * subspan which will be started immediately before the call and completed as soon as the call completes.
     */
    protected final boolean surroundCallsWithSubspan;

    /**
     * Default constructor - sets {@link #surroundCallsWithSubspan} to true.
     */
    public WingtipsAsyncClientHttpRequestInterceptor() {
        this(true);
    }

    /**
     * Constructor that lets you choose whether downstream calls will be surrounded with a subspan.
     *
     * @param surroundCallsWithSubspan pass in true to have downstream calls surrounded with a new span, false to only
     * propagate the current span's info downstream (no subspan).
     */
    public WingtipsAsyncClientHttpRequestInterceptor(boolean surroundCallsWithSubspan) {
        this.surroundCallsWithSubspan = surroundCallsWithSubspan;
    }

    @Override
    @SuppressWarnings("deprecation")
    public ListenableFuture<ClientHttpResponse> intercept(
        HttpRequest request, byte[] body, AsyncClientHttpRequestExecution execution
    ) throws IOException {
        HttpRequest wrapperRequest = new HttpRequestWrapperWithModifiableHeaders(request);

        Tracer tracer = Tracer.getInstance();

        // Handle subspan stuff if desired.
        SpanAroundAsyncCallFinisher subspanFinisher = null;
        TracingState originalThreadInfo = null;
        if (surroundCallsWithSubspan) {
            originalThreadInfo = TracingState.getCurrentThreadTracingState();

            // This will start a new trace if necessary, or a subspan if a trace is already in progress.
            tracer.startSpanInCurrentContext(getSubspanSpanName(request), Span.SpanPurpose.CLIENT);

            // Create the callback that will complete the subspan when the request finishes.
            subspanFinisher = new SpanAroundAsyncCallFinisher(TracingState.getCurrentThreadTracingState());
        }

        try {
            // Whether we created a subspan or not we want to add the tracing headers with the current span's info.
            setTracingPropagationHeaders(wrapperRequest, tracer.getCurrentSpan());

            // Execute the request/interceptor chain, and add the callback to finish the subspan (if one exists).
            ListenableFuture<ClientHttpResponse> result = execution.executeAsync(wrapperRequest, body);
            if (subspanFinisher != null) {
                result.addCallback(subspanFinisher);
            }

            return result;
        }
        catch(Throwable t) {
            // Something went wrong in the execution.executeAsync(...) call so we complete the subspan now (if one
            //      exists)
            if (subspanFinisher != null) {
                subspanFinisher.finishCallSpan();
            }

            throw t;
        }
        finally {
            // Reset back to the original tracing state that was on this thread when this method began (only relevant
            //      if surroundCallsWithSubspan is true).
            if (surroundCallsWithSubspan) {
                unlinkTracingFromCurrentThread(originalThreadInfo);
            }
        }
    }

    /**
     * Returns the name that should be used for the subspan surrounding the call. Defaults to {@code
     * asyncresttemplate_downstream_call-[HTTP_METHOD]_[REQUEST_URI]}, e.g. for a GET call to https://foo.bar/baz,
     * this would return {@code "asyncresttemplate_downstream_call-GET_https://foo.bar/baz"}. You can override this
     * method to return something else if you want a different subspan name format.
     *
     * @param request The request that is about to be executed.
     * @return The name that should be used for the subspan surrounding the call.
     */
    protected String getSubspanSpanName(HttpRequest request) {
        return "asyncresttemplate_downstream_call-" + getRequestMethodAsString(request) + "_"
               + stripQueryString(request.getURI().toString());
    }

    /**
     * Helper method for stripping the query string (and everything after it) from a URI.
     *
     * @param uri The URI.
     * @return The given {@code uri} string after removing everything following the query string question mark. If no
     * query string is found then the given {@code uri} will be returned unmodified.
     */
    protected String stripQueryString(String uri) {
        int indexOfQuestionMark = uri.indexOf('?');

        if (indexOfQuestionMark == -1) {
            return uri;
        }

        return uri.substring(0, indexOfQuestionMark);
    }

    /**
     * @param request The request that is about to be executed.
     * @return The given request's {@link HttpMethod#name()}, or "UNKNOWN" if the method is null.
     */
    protected String getRequestMethodAsString(HttpRequest request) {
        HttpMethod method = request.getMethod();
        if (method == null) {
            return "UNKNOWN";
        }

        return method.name();
    }

    /**
     * A {@link ListenableFutureCallback} that will complete the given {@link TracingState} (e.g. tracing state
     * representing a subspan) when executed. This should be attached as a callback to the result of {@link
     * #intercept(HttpRequest, byte[], AsyncClientHttpRequestExecution)}.
     */
    @SuppressWarnings("WeakerAccess")
    protected static class SpanAroundAsyncCallFinisher implements ListenableFutureCallback<ClientHttpResponse> {

        protected final TracingState spanAroundCallTracingState;

        protected SpanAroundAsyncCallFinisher(TracingState spanAroundCallTracingState) {
            this.spanAroundCallTracingState = spanAroundCallTracingState;
        }

        @Override
        public void onFailure(Throwable ex) {
            finishCallSpan();
        }

        @Override
        public void onSuccess(ClientHttpResponse result) {
            finishCallSpan();
        }

        @SuppressWarnings("deprecation")
        protected void finishCallSpan() {
            if (spanAroundCallTracingState != null) {
                // Span.close() contains the logic we want - if the spanAroundCall was an overall span (new trace)
                //      then tracer.completeRequestSpan() will be called, otherwise it's a subspan and
                //      tracer.completeSubSpan() will be called.
                runnableWithTracing(
                    new Runnable() {
                        @Override
                        public void run() {
                            Tracer.getInstance().getCurrentSpan().close();
                        }
                    },
                    spanAroundCallTracingState
                ).run();
            }
        }
    }
}
